// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_SortArray = require("bs-platform/lib/js/belt_SortArray.js");
var Data$Covid_stats = require("./Data.bs.js");

function columnToString(col) {
  switch (col) {
    case /* State */0 :
        return "State";
    case /* Total */1 :
        return "Total";
    case /* Per100K */2 :
        return "Per100K";
    
  }
}

function columnFromString(s) {
  switch (s) {
    case "Per100K" :
        return /* Per100K */2;
    case "Total" :
        return /* Total */1;
    default:
      return /* State */0;
  }
}

function directionToString(dir) {
  if (dir) {
    return "Descending";
  } else {
    return "Ascending";
  }
}

function directionFromString(s) {
  if (s === "Ascending") {
    return /* Ascending */0;
  } else {
    return /* Descending */1;
  }
}

function periodToString(period) {
  if (period) {
    return "PastWeek";
  } else {
    return "All";
  }
}

function periodFromString(s) {
  if (s === "PastWeek") {
    return /* PastWeek */1;
  } else {
    return /* All */0;
  }
}

var pageState = {
  column: /* Per100K */2,
  direction: /* Descending */1,
  period: /* PastWeek */1,
  indices: []
};

function to100K(x, index) {
  return x / Caml_array.caml_array_get(Data$Covid_stats.csv.states, index).population * 100000.0;
}

function byStateName(indexA, indexB) {
  var states = Data$Covid_stats.csv.states;
  var result = Caml_array.caml_array_get(states, indexA).name > Caml_array.caml_array_get(states, indexB).name ? 1 : (
      Caml_array.caml_array_get(states, indexA).name < Caml_array.caml_array_get(states, indexB).name ? -1 : 0
    );
  if (pageState.direction === /* Ascending */0) {
    return result;
  } else {
    return -result | 0;
  }
}

function byTotal(indexA, indexB) {
  var states = Data$Covid_stats.csv.states;
  var totalA = pageState.period === /* All */0 ? Caml_array.caml_array_get(states, indexA).totalCases : Caml_array.caml_array_get(states, indexA).pastWeekCases;
  var totalB = pageState.period === /* All */0 ? Caml_array.caml_array_get(states, indexB).totalCases : Caml_array.caml_array_get(states, indexB).pastWeekCases;
  var valueA = totalA / (
    pageState.column === /* Total */1 ? 1.0 : Caml_array.caml_array_get(states, indexA).population / 100000.0
  );
  var valueB = totalB / (
    pageState.column === /* Total */1 ? 1.0 : Caml_array.caml_array_get(states, indexB).population / 100000.0
  );
  var result = valueA > valueB ? 1 : (
      valueA < valueB ? -1 : 0
    );
  if (pageState.direction === /* Ascending */0) {
    return result;
  } else {
    return -result | 0;
  }
}

function setHeaders(param) {
  var setChosen = function (id, chosen) {
    var element = document.getElementById(id);
    if (!(element == null)) {
      if (chosen) {
        element.setAttribute("class", "arrow chosen");
      } else {
        element.setAttribute("class", "arrow");
      }
      return ;
    }
    
  };
  var setTitle = function (titleStr) {
    var setArrow = function (dirStr) {
      var dir = directionFromString(dirStr);
      return setChosen(titleStr + "_" + dirStr, columnFromString(titleStr) === pageState.column && dir === pageState.direction);
    };
    var col = columnFromString(titleStr);
    setChosen(titleStr, col === pageState.column);
    return Belt_Array.forEach([
                "Ascending",
                "Descending"
              ], setArrow);
  };
  var wordIds = [
    "State",
    "Total",
    "Per100K"
  ];
  Belt_Array.forEach(wordIds, setTitle);
  var t1 = document.getElementById("timePeriod1");
  var t2 = document.getElementById("timePeriod2");
  if (!(t1 == null) && !(t2 == null)) {
    if (pageState.period === /* All */0) {
      t2.setAttribute("selected", "selected");
      t1.removeAttribute("selected");
    } else {
      t1.setAttribute("selected", "selected");
      t2.removeAttribute("selected");
    }
    return ;
  }
  
}

function sortIndices(indices) {
  var match = pageState.column;
  if (match !== 0) {
    return Belt_SortArray.stableSortBy(indices, byTotal);
  } else {
    return Belt_SortArray.stableSortBy(indices, byStateName);
  }
}

function makeRow(absoluteIndex, rankIndex) {
  var tr = document.createElement("tr");
  var td0 = document.createElement("td");
  td0.innerHTML = String(absoluteIndex + 1 | 0);
  var td1 = document.createElement("td");
  td1.innerHTML = Caml_array.caml_array_get(Data$Covid_stats.csv.states, rankIndex).name;
  var td2 = document.createElement("td");
  td2.setAttribute("class", "rightAlign");
  var total = pageState.period === /* All */0 ? Caml_array.caml_array_get(Data$Covid_stats.csv.states, rankIndex).totalCases : Caml_array.caml_array_get(Data$Covid_stats.csv.states, rankIndex).pastWeekCases;
  td2.innerHTML = total.toFixed(0);
  var td3 = document.createElement("td");
  td3.setAttribute("class", "rightAlign");
  var perCapita = pageState.period === /* All */0 ? Caml_array.caml_array_get(Data$Covid_stats.csv.states, rankIndex).totalCases : Caml_array.caml_array_get(Data$Covid_stats.csv.states, rankIndex).pastWeekCases;
  td3.innerHTML = to100K(perCapita, rankIndex).toFixed(2);
  tr.appendChild(td0);
  tr.appendChild(td1);
  tr.appendChild(td2);
  tr.appendChild(td3);
  var table = document.getElementById("tableBody");
  if (!(table == null)) {
    table.appendChild(tr);
    return ;
  }
  
}

function removeChildren(parent) {
  while(true) {
    var lastChild = parent.lastChild;
    if (lastChild == null) {
      return ;
    }
    parent.removeChild(lastChild);
    continue ;
  };
}

function drawTable(param) {
  var tableElement = document.getElementById("tableBody");
  if (!(tableElement == null)) {
    removeChildren(tableElement);
    var newIndices = sortIndices(Belt_Array.makeBy(Data$Covid_stats.csv.states.length, (function (i) {
                return i;
              })));
    Belt_Array.mapWithIndex(newIndices, makeRow);
  }
  return setHeaders(undefined);
}

function changeColumn(evt) {
  var col = evt.target;
  pageState.column = columnFromString(col.id);
  return drawTable(undefined);
}

function changeDirection(evt) {
  var colDir = evt.target;
  var parts = colDir.id.split("_");
  pageState.column = columnFromString(Caml_array.caml_array_get(parts, 0));
  pageState.direction = directionFromString(Caml_array.caml_array_get(parts, 1));
  return drawTable(undefined);
}

function changeTimePeriod(evt) {
  var menu = evt.target;
  pageState.period = menu.value === "1" ? /* PastWeek */1 : /* All */0;
  return drawTable(undefined);
}

function addClick(handler, element) {
  element.addEventListener("click", handler);
  
}

function setEventHandlers(param) {
  Belt_Array.forEach([
        "State",
        "Total",
        "Per100K"
      ], (function (heading) {
          var element = document.getElementById(heading);
          if (!(element == null)) {
            addClick(changeColumn, element);
            return Belt_Array.forEach([
                        "Ascending",
                        "Descending"
                      ], (function (arrow) {
                          var element = document.getElementById(heading + "_" + arrow);
                          if (!(element == null)) {
                            return addClick(changeDirection, element);
                          }
                          
                        }));
          }
          
        }));
  var element = document.getElementById("timePeriod");
  if (!(element == null)) {
    return addClick(changeTimePeriod, element);
  }
  
}

function setTimePeriods(param) {
  var time1 = document.getElementById("timePeriod1");
  var time2 = document.getElementById("timePeriod2");
  var len = Data$Covid_stats.csv.dates.length;
  if (!(time1 == null) && !(time2 == null)) {
    time1.innerHTML = time1.innerHTML + " " + Caml_array.caml_array_get(Data$Covid_stats.csv.dates, len - 8 | 0) + " - " + Caml_array.caml_array_get(Data$Covid_stats.csv.dates, len - 1 | 0);
    time2.innerHTML = time2.innerHTML + " " + Caml_array.caml_array_get(Data$Covid_stats.csv.dates, 0) + " - " + Caml_array.caml_array_get(Data$Covid_stats.csv.dates, len - 1 | 0);
    return ;
  }
  
}

var D;

var Doc;

var Elem;

var $$Node;

var Evt;

exports.D = D;
exports.Doc = Doc;
exports.Elem = Elem;
exports.$$Node = $$Node;
exports.Evt = Evt;
exports.columnToString = columnToString;
exports.columnFromString = columnFromString;
exports.directionToString = directionToString;
exports.directionFromString = directionFromString;
exports.periodToString = periodToString;
exports.periodFromString = periodFromString;
exports.pageState = pageState;
exports.to100K = to100K;
exports.byStateName = byStateName;
exports.byTotal = byTotal;
exports.setHeaders = setHeaders;
exports.sortIndices = sortIndices;
exports.makeRow = makeRow;
exports.removeChildren = removeChildren;
exports.drawTable = drawTable;
exports.changeColumn = changeColumn;
exports.changeDirection = changeDirection;
exports.changeTimePeriod = changeTimePeriod;
exports.addClick = addClick;
exports.setEventHandlers = setEventHandlers;
exports.setTimePeriods = setTimePeriods;
/* No side effect */
