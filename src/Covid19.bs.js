// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var monthNames = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];

var csv = {
  contents: {
    states: [],
    dates: [],
    totalCases: []
  }
};

function analyzeData(cases, population) {
  var processPopulation = function (lines, _acc, _total, _state, _index) {
    while(true) {
      var index = _index;
      var state = _state;
      var total = _total;
      var acc = _acc;
      if (index === lines.length) {
        return acc.concat([[
                      state,
                      total
                    ]]);
      }
      var items = Caml_array.caml_array_get(lines, index).split(",");
      if (items.length === 4) {
        var countyState = Caml_array.caml_array_get(items, 2);
        var countyPop = Caml_format.caml_float_of_string(Caml_array.caml_array_get(items, 3));
        if (countyState === state) {
          _index = index + 1 | 0;
          _total = total + countyPop;
          continue ;
        }
        if (state !== "") {
          _index = index + 1 | 0;
          _state = countyState;
          _total = 0.0;
          _acc = acc.concat([[
                  state,
                  total
                ]]);
          continue ;
        }
        _index = index + 1 | 0;
        _state = countyState;
        continue ;
      }
      _index = index + 1 | 0;
      continue ;
    };
  };
  var adder = function (f, s) {
    return f + Caml_format.caml_float_of_string(s);
  };
  var processCases = function (lines, _acc, _total, _state, _index) {
    while(true) {
      var index = _index;
      var state = _state;
      var total = _total;
      var acc = _acc;
      if (index === lines.length) {
        return acc.concat([[
                      state,
                      total
                    ]]);
      }
      var items = Caml_array.caml_array_get(lines, index).split(",");
      if (items.length >= total.length) {
        var countyState = Caml_array.caml_array_get(items, 2);
        if (countyState === state) {
          _index = index + 1 | 0;
          _total = Belt_Array.zipByU(total, items.slice(4), adder);
          continue ;
        }
        if (state !== "") {
          _index = index + 1 | 0;
          _state = countyState;
          _total = Belt_Array.make(total.length, 0.0);
          _acc = acc.concat([[
                  state,
                  total
                ]]);
          continue ;
        }
        _index = index + 1 | 0;
        _state = countyState;
        continue ;
      }
      _index = index + 1 | 0;
      continue ;
    };
  };
  var popLines = population.split("\n");
  var statePopulations = processPopulation(popLines, [], 0.0, "", 1);
  var caseLines = cases.split("\n");
  var caseHeader = Caml_array.caml_array_get(caseLines, 0);
  var dates = caseHeader.split(",").slice(4);
  var emptyTotals = Belt_Array.make(dates.length, 0.0);
  var stateCases = processCases(caseLines, [], emptyTotals, "", 1);
  csv.contents = {
    states: statePopulations,
    dates: dates,
    totalCases: stateCases
  };
  
}

function getPopulation(cases) {
  return fetch("covid_county_population_usafacts.csv").then(function (prim) {
                return prim.text();
              }).then(function (population) {
              return Promise.resolve(analyzeData(cases, population));
            });
}

function fetchData(param) {
  return fetch("covid_confirmed_usafacts.csv").then(function (prim) {
                return prim.text();
              }).then(function (cases) {
              return Promise.resolve(getPopulation(cases));
            });
}

console.log("About to fetch data");

fetchData(undefined);

exports.monthNames = monthNames;
exports.csv = csv;
exports.analyzeData = analyzeData;
exports.getPopulation = getPopulation;
exports.fetchData = fetchData;
/*  Not a pure module */
